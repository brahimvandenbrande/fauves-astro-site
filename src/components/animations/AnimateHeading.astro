---
// This script will only run on the client
---

<style>
  /* Base styles for the heading */
  .gsap-heading, #main-heading {
    opacity: 1;
    visibility: visible;
  }
  
  /* Style for split text elements */
  .gsap-line {
    display: block;
    overflow: hidden;
  }
  
  .gsap-word {
    display: inline-block;
    white-space: nowrap;
    opacity: 0;
    transform: translateY(20px);
  }
</style>

<script>
  // Function to initialize the heading animation
  async function initHeadingAnimation() {
    try {
      // Load GSAP and its plugins
      const { gsap } = await import('gsap');
      const { SplitText } = await import('gsap/SplitText');
      gsap.registerPlugin(SplitText);

      // Find the heading by ID or class
      const heading = document.querySelector("#main-heading, .gsap-heading");
      if (!heading) return;

      // Create SplitText instance for the heading
      const split = new SplitText(heading, {
        type: "lines,words",
        linesClass: "gsap-line",
        wordsClass: "gsap-word",
        aria: "hidden"
      });

      // Store the original HTML to restore it later
      const originalHTML = heading.innerHTML;
      
      // Animate each line separately
      if (split.lines && split.lines.length > 0) {
        // Animate each line in sequence
        split.lines.forEach((line, i) => {
          // Animate words in this line
          gsap.to(line.querySelectorAll('.gsap-word') || [line], {
            opacity: 1,
            y: 0,
            duration: 0.8,
            ease: "power3.out",
            stagger: 0.05,
            delay: i * 0.1
          });
        });
      } else {
        // Fallback if no lines are detected
        gsap.to(split.words || [heading], {
          opacity: 1,
          y: 0,
          duration: 0.8,
          ease: "power3.out",
          stagger: 0.05
        });
      }

      // Clean up function for Astro view transitions
      const cleanup = () => {
        if (split.revert) {
          heading.innerHTML = originalHTML;
          split.revert();
        }
        document.removeEventListener('astro:before-preparation', cleanup);
      };

      // Clean up when navigating away
      document.addEventListener('astro:before-preparation', cleanup);
      
    } catch (error) {
      console.warn("GSAP animation error:", error);
    }
  }

  // Initialize animation when the page loads or view transition completes
  if (document.startViewTransition) {
    document.addEventListener('astro:page-load', initHeadingAnimation);
  } else {
    document.addEventListener('DOMContentLoaded', initHeadingAnimation);
  }
</script>
