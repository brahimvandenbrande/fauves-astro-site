---
// Props
export interface Props {
  targetSelector?: string;
  height?: string;
  color?: string;
  bg?: string;
  radius?: string;
  position?: "top" | "bottom";
}

const {
  targetSelector = ".prose",
  height = "6px",
  color = "#7c3aed",
  bg = "transparent",
  radius = "0",
  position = "top"
} = Astro.props;
---

<div id="reading-progress-container">
  <progress
    class:list={[
      "reading-progress",
      position === "top" ? "fixed top-0" : "fixed bottom-0"
    ]}
    style={{
      "--progress-height": height,
      "--progress-color": color,
      "--progress-bg": bg,
      "--progress-radius": radius
    }}
    max="100"
    value="0"
    aria-hidden="true"
    data-reading-progress></progress>
</div>

<style>
  progress.reading-progress {
    position: fixed;
    left: 0;
    right: 0;
    top: 0;
    width: 100%;
    height: 6px;
    z-index: 9999;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    border: none;
    background-color: transparent;
    display: block !important;
  }

  /* WebKit/Blink */
  progress.reading-progress::-webkit-progress-bar {
    background-color: rgba(0, 0, 0, 0.05);
  }

  progress.reading-progress::-webkit-progress-value {
    background-color: var(--progress-color);
    border-radius: 0px;
    transition: width 0.1s ease;
  }

  /* Firefox */
  progress.reading-progress::-moz-progress-bar {
    background-color: var(--progress-color);
    border-radius: 0px;
  }

  /* Edge/IE */
  progress.reading-progress::-ms-fill {
    background-color: var(--progress-color);
    border-radius: 0px;
  }

  /* Animation */
  progress.reading-progress {
    transition: width 0.1s ease;
  }

  /* Active state when scrolled */
  progress.reading-progress.active {
    opacity: 1;
    visibility: visible;
  }

  @media (prefers-reduced-motion: reduce) {
    progress.reading-progress,
    progress.reading-progress::-webkit-progress-value {
      transition: none;
    }
  }
</style>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    console.log("ReadingProgress: DOM loaded");

    const progressBar = document.querySelector("progress.reading-progress");
    if (!progressBar) {
      console.warn("ReadingProgress: No progress element found");
      return;
    }

    progressBar.style.display = "block";
    progressBar.style.width = "100%";

    function updateProgress() {
      const { scrollTop, scrollHeight, clientHeight } =
        document.documentElement;
      const scrolled = (scrollTop / (scrollHeight - clientHeight)) * 100;
      const progress = Math.min(100, Math.max(0, scrolled));

      if (progressBar) {
        progressBar.value = progress;
        progressBar.classList.toggle("active", progress > 0);
      }
    }

    let ticking = false;
    function onScroll() {
      if (!ticking) {
        window.requestAnimationFrame(() => {
          updateProgress();
          ticking = false;
        });
        ticking = true;
      }
    }

    window.addEventListener("scroll", onScroll, { passive: true });
    window.addEventListener("resize", updateProgress, { passive: true });

    setTimeout(updateProgress, 100);
    console.log("ReadingProgress: Initialized");
  });
</script>
