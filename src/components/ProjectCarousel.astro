---
// src/components/ProjectCarousel.astro
import type { CollectionEntry } from 'astro:content';
import { Image } from 'astro:assets';

interface Props {
  projects: CollectionEntry<'projects'>[];
}

const { projects } = Astro.props;

// Function to get optimized image
async function getOptimizedImage(src: string) {
  try {
    const image = await import(`../assets/${src}`);
    return image.default;
  } catch (error) {
    console.error(`Error loading image: ${src}`, error);
    return null;
  }
}
---

<div class="relative w-full h-[90vh]" aria-label="Featured Projects">
  <!-- Carousel -->
  <div
    data-carousel
    class="flex items-end gap-6 overflow-x-auto scroll-smooth snap-x snap-mandatory pl-4 pb-16 h-full"
    style="scrollbar-width: none;"
  >
    {projects.map(async (project, index) => {
      const imageSrc = await getOptimizedImage(project.data.image.src);
      
      return (
        <div 
          class="min-w-[70vw] max-w-[800px] snap-start shrink-0 relative h-full flex items-center justify-center"
          data-slide
        >
          <div class="relative w-full h-[80vh] my-auto">
            <div class="w-full h-full overflow-hidden">
              {imageSrc ? (
                <Image
                  src={imageSrc}
                  alt={project.data.image.alt}
                  width={1200}
                  height={800}
                  class="w-full h-full object-cover rounded-2xl"
                  loading={index < 2 ? 'eager' : 'lazy'}
                  decoding="async"
                  format="webp"
                  quality={90}
                />
              ) : (
                <div class="w-full h-full bg-gray-200 rounded-2xl flex items-center justify-center">
                  <span class="text-gray-500">Image not found: {project.data.image.src}</span>
                </div>
              )}
            </div>
            <p class="absolute bottom-4 left-4 text-base font-medium text-black bg-white/80 px-3 py-1.5 rounded-lg">
              <strong class="font-bold">{project.data.client || 'Project'}</strong>
              {project.data.title && (
                <span class="font-light ml-2">{project.data.title}</span>
              )}
            </p>
          </div>
        </div>
      );
    })}
  </div>

  <!-- Navigation Arrows -->
  {projects.length > 1 && (
    <div class="absolute bottom-6 right-4 md:right-8 lg:right-16 flex gap-4 z-10">
      <button
        data-carousel-prev
        class="w-10 h-10 flex items-center justify-center rounded-full bg-white shadow-md hover:bg-neutral-100 transition-all duration-200"
        aria-label="Previous slide"
      >
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M15 18l-6-6 6-6"/>
        </svg>
      </button>
      <button
        data-carousel-next
        class="w-10 h-10 flex items-center justify-center rounded-full bg-white shadow-md hover:bg-neutral-100 transition-all duration-200"
        aria-label="Next slide"
      >
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M9 18l6-6-6-6"/>
        </svg>
      </button>
    </div>
  )}

  <script>
    const carousel = document.querySelector('[data-carousel]');
    const slides = document.querySelectorAll('[data-slide]');
    const btnPrev = document.querySelector('[data-carousel-prev]');
    const btnNext = document.querySelector('[data-carousel-next]');
    
    if (slides.length > 0) {
      let currentIndex = 0;
      let isScrolling = false;
      let autoplayInterval;
      
      // Autoplay configuration
      const AUTOPLAY_DELAY = 5000; // 5 seconds between slides
      
      // Start autoplay
      function startAutoplay() {
        stopAutoplay(); // Clear any existing interval
        autoplayInterval = setInterval(() => {
          if (!document.hidden) { // Only advance if tab is active
            const newIndex = (currentIndex + 1) % slides.length;
            scrollToSlide(newIndex);
          }
        }, AUTOPLAY_DELAY);
      }
      
      // Stop autoplay
      function stopAutoplay() {
        if (autoplayInterval) {
          clearInterval(autoplayInterval);
        }
      }
      
      // Pause autoplay on hover
      carousel.addEventListener('mouseenter', stopAutoplay);
      carousel.addEventListener('mouseleave', startAutoplay);
      
      // Pause autoplay when tab is not visible
      document.addEventListener('visibilitychange', () => {
        if (document.hidden) {
          stopAutoplay();
        } else {
          startAutoplay();
        }
      });
      
      function scrollToSlide(index) {
        if (isScrolling || !slides[index]) return;
        
        isScrolling = true;
        currentIndex = index;
        const targetSlide = slides[index];
        const carouselRect = carousel.getBoundingClientRect();
        const targetRect = targetSlide.getBoundingClientRect();
        
        // Calculate the center position of the carousel viewport
        const viewportCenter = carouselRect.left + (carouselRect.width / 2);
        const slideCenter = targetRect.left + (targetRect.width / 2);
        
        // Calculate the scroll position needed to center the slide
        const scrollPosition = carousel.scrollLeft + (slideCenter - viewportCenter);
        
        carousel.scrollTo({ 
          left: scrollPosition, 
          behavior: 'smooth' 
        });
        
        // Reset the scrolling flag after the animation completes
        setTimeout(() => {
          isScrolling = false;
        }, 500);
      }
      
      // Handle previous button click
      btnPrev?.addEventListener('click', (e) => {
        e.preventDefault();
        if (isScrolling) return;
        const newIndex = (currentIndex - 1 + slides.length) % slides.length;
        scrollToSlide(newIndex);
        // Restart autoplay with fresh delay
        startAutoplay();
      });
      
      // Handle next button click
      btnNext?.addEventListener('click', (e) => {
        e.preventDefault();
        if (isScrolling) return;
        const newIndex = (currentIndex + 1) % slides.length;
        scrollToSlide(newIndex);
        // Restart autoplay with fresh delay
        startAutoplay();
      });
      
      // Handle keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') {
          e.preventDefault();
          if (isScrolling) return;
          const newIndex = (currentIndex - 1 + slides.length) % slides.length;
          scrollToSlide(newIndex);
          startAutoplay();
        } else if (e.key === 'ArrowRight') {
          e.preventDefault();
          if (isScrolling) return;
          const newIndex = (currentIndex + 1) % slides.length;
          scrollToSlide(newIndex);
          startAutoplay();
        }
      });
      
      // Initialize the carousel
      scrollToSlide(0);
      startAutoplay();
      
      // Clean up on component unmount
      window.addEventListener('beforeunload', () => {
        stopAutoplay();
        carousel.removeEventListener('mouseenter', stopAutoplay);
        carousel.removeEventListener('mouseleave', startAutoplay);
      });
    }
  </script>
</div>