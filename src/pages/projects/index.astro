---
// src/pages/projects/index.astro
import Layout from '@layouts/Layout.astro';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import { Picture } from "astro:assets";
import Navigation from '@components/Navigation.astro';
import Footer from '@components/Footer.astro';
import WebsiteStructuredData from '@components/WebsiteStructuredData.astro';

// Get all projects, sorted by date (newest first)
const projects = (await getCollection('projects')).sort(
  (a: CollectionEntry<'projects'>, b: CollectionEntry<'projects'>) => 
    b.data.date.getTime() - a.data.date.getTime()
);

// Function to get optimized image
async function getOptimizedImage(src: string) {
  try {
    // Remove 'projects/' from the start of the path if it exists
    const cleanSrc = src.startsWith('projects/') ? src.substring('projects/'.length) : src;
    // Using @vite-ignore to suppress the warning since we need dynamic imports
    // @ts-ignore - Vite handles this import at runtime
    const image = await import(/* @vite-ignore */ `../../assets/projects/${cleanSrc}`);
    return image.default;
  } catch (error) {
    console.error(`Error loading image: ${src}`, error);
    return null;
  }
}

// Preload images
const projectsWithImages = await Promise.all(
  projects.map(async (project: CollectionEntry<'projects'>) => {
    if (project.data.image?.src) {
      const imageSrc = await getOptimizedImage(project.data.image.src);
      return { ...project, imageSrc };
    }
    return { ...project, imageSrc: null };
  })
);

// Generate structured data for the projects page
const structuredData = {
  "@context": "https://schema.org",
  "@type": "ItemList",
  "itemListElement": projects.map((project: CollectionEntry<'projects'>, index: number) => ({
    "@type": "ListItem",
    "position": index + 1,
    "item": {
      "@type": "CreativeWork",
      "name": project.data.title,
      "description": project.data.description || project.data.excerpt,
      "url": `${new URL(Astro.url).origin}/projects/${project.slug}`,
      "datePublished": project.data.date.toISOString(),
      "image": project.data.image?.src ? `${new URL(Astro.url).origin}/assets/projects/${project.data.image.src.replace('projects/', '')}` : undefined
    }
  }))
};
---

<Layout 
  title="Nos projets | Fauves" 
  description="Découvrez comment nous avons aidé ces entreprises à concrétiser leur vision et à créer leur marque.">
  <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
  <WebsiteStructuredData slot="structured-data" />

  <!-- Navigation -->
  <header role="banner">
    <Navigation />
  </header>

  <!-- Main Content -->
  <main id="main-content" class="mx-auto flex max-w-[85rem] flex-col gap-12 px-4 pt-24 pb-16">
    <section>
      <div>
        <div class="text-left mb-12">
          <h1 class="text-h1 leading-h1 font-degular w-full max-w-[75.6rem] font-light text-black pb-8">À chaque besoin, sa solution.</h1>
          <p class="font-degular text-[1.7rem] leading-[1.7rem] font-light text-black max-w-[85rem]">Découvrez comment nous avons aidé ces entreprises à concrétiser leur vision et à créer leur marque.</p>
        </div>

        <div class="grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3" role="list">
          {projectsWithImages.map(({ imageSrc, ...project }) => (
            <article 
              class="group flex flex-col overflow-hidden rounded-lg shadow-lg transition-transform hover:scale-[1.02]"
              itemscope
              itemtype="https://schema.org/CreativeWork"
            >
              <a 
                href={`/projects/${project.slug}`}
                class="block h-full"
                aria-label={`View ${project.data.title} project`}
                itemprop="url"
              >
                {imageSrc ? (
                  <div class="h-48 overflow-hidden">
                    <Picture
                      src={imageSrc}
                      alt={project.data.image?.alt || `Thumbnail for ${project.data.title}`}
                      width={1200}
                      height={800}
                      class="h-full w-full object-cover object-center"
                      loading="eager"
                      decoding="async"
                      formats={["avif", "webp"]}
                      quality={90}
                      itemprop="image"
                    />
                  </div>
                ) : (
                  <div class="flex h-48 w-full items-center justify-center bg-gray-100">
                    <span class="text-gray-500">
                      {project.data.image?.src ? `Image not found: ${project.data.image.src}` : 'No image available'}
                    </span>
                  </div>
                )}
                <div class="flex flex-1 flex-col bg-white p-6">
                  <div class="flex-1">
                    {project.data.category && (
                      <p class="text-sm font-medium text-indigo-600" itemprop="genre">
                        {project.data.category}
                      </p>
                    )}
                    <h2 
                      class="mt-2 text-xl font-semibold text-gray-900"
                      itemprop="name"
                    >
                      {project.data.title}
                    </h2>
                    <p 
                      class="mt-3 text-base text-gray-500"
                      itemprop="description"
                    >
                      {project.data.excerpt || project.data.description}
                    </p>
                  </div>
                  {project.data.tags && project.data.tags.length > 0 && (
                    <div class="mt-4">
                      <div class="flex flex-wrap gap-2" role="list">
                        {project.data.tags.slice(0, 3).map((tag: string) => (
                          <span 
                            class="inline-flex items-center rounded-full bg-gray-100 px-2.5 py-0.5 text-xs font-medium text-gray-800"
                            itemprop="keywords"
                          >
                            {tag}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </a>
            </article>
          ))}
        </div>
      </div>
    </section>
  </main>

  <!-- Footer -->
  <footer role="contentinfo">
    <Footer />
  </footer>
</Layout>
