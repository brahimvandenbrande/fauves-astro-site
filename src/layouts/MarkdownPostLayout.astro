---
import BaseHead from "@components/BaseHead.astro";
import Navigation from "@components/Navigation.astro";
import "../../src/styles/global.css";
import ReadingProgress from "@components/ui/ReadingProgress.astro";
import TableOfContents from "@components/TableOfContents.astro";

// Type definition for headings
interface Heading {
  depth: number;
  slug: string;
  text: string;
}

// Initialize headings as an empty array
const headings: Heading[] = [];

interface Props {
  frontmatter: {
    title: string;
    description: string;
    pubDate?: string;
    updatedDate?: string;
    author?: string;
    [key: string]: any;
  };
  title: string;
  description: string;
  canonical?: string;
  noindex?: boolean;
  ogImage?: string;
  structuredData?: any;
  children: any;
}

const { frontmatter, children } = Astro.props as Props;
const {
  title,
  description,
  pubDate,
  updatedDate,
  author,
  tags = [],
  minutesRead
} = frontmatter;
---

<!doctype html>
<html lang="fr-be" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <BaseHead
      title={title}
      description={description}
      canonical={Astro.url.href}
      noindex={false}
      ogImage={frontmatter.image?.url}
    />
  </head>
  <body
    class="flex min-h-screen flex-col overflow-x-hidden bg-[#FFFFFF] antialiased"
  >
    <!-- Skip to main content link for keyboard users -->
    <a href="#main-content" class="sr-only focus:not-sr-only focus:fixed focus:top-4 focus:left-4 focus:z-50 focus:bg-white focus:px-4 focus:py-2 focus:font-medium focus:ring-2 focus:ring-[#522BE2] focus:ring-offset-2 focus:rounded">
      Aller au contenu principal
    </a>

    <header role="banner" class="border-b border-[#F8F7E5BF]">
      <Navigation />
    </header>
    <ReadingProgress />
    <main id="main-content" class="flex-grow">
      <div class="mx-auto max-w-[85rem] pt-16">
        <div
          class="grid grid-cols-1 gap-12 px-4 sm:px-6 lg:grid-cols-[240px_1fr] lg:px-8"
        >
          <!-- Sidebar -->
          <aside class="hidden pl-8 lg:block">
            <div class="sticky top-28">
              <div class="mb-6 border-b border-[#F8F7E5BF] pb-6">
                <TableOfContents headings={headings} />
              </div>
              <div class="mb-6 border-b border-[#F8F7E5BF] pb-6">
                <h2
                  class="text-sm font-semibold tracking-wider text-[#000000] uppercase"
                >
                  Categories
                </h2>
                <!-- Placeholder for categories - will be populated later -->
                <div class="mt-4 space-y-2">
                  <a
                    href="#"
                    class="block text-sm text-[#000000] hover:text-[#522BE2]"
                    >Branding</a
                  >
                  <a
                    href="#"
                    class="block text-sm text-[#000000] hover:text-[#522BE2]"
                    >Design</a
                  >
                  <a
                    href="#"
                    class="block text-sm text-[#000000] hover:text-[#522BE2]"
                    >Strategy</a
                  >
                </div>
              </div>

              {
                tags.length > 0 && (
                  <div>
                    <h2 class="text-sm font-semibold tracking-wider text-[#000000] uppercase">
                      Tags
                    </h2>
                    <div class="mt-4 flex flex-wrap gap-2">
                      {tags.map((tag: string) => (
                        <a
                          href={`/blog/tags/${tag.toLowerCase()}`}
                          class="inline-flex items-center rounded-full bg-[#F8F7E5BF] px-2.5 py-0.5 text-xs font-medium text-[#000000] hover:bg-[#F75B31] hover:text-[#FFFFFF]"
                        >
                          {tag}
                        </a>
                      ))}
                    </div>
                  </div>
                )
              }
            </div>
          </aside>

          <!-- Main Content -->
          <article class="w-full">
            <div class="mx-auto max-w-3xl">
              <header class="mb-12">
                <h1
                  class="text-4xl font-semibold tracking-tight text-[#000000] sm:text-5xl"
                >
                  {title}
                </h1>

                <div class="mt-6 flex items-center text-sm text-[#000000]">
                  <time
                    datetime={frontmatter.pubDate}
                    class="flex items-center"
                  >
                    {
                      new Date(frontmatter.pubDate || "").toLocaleDateString(
                        "fr-BE",
                        {
                          year: "numeric",
                          month: "long",
                          day: "numeric"
                        }
                      )
                    }
                  </time>
                  {
                    frontmatter.author && (
                      <>
                        <span class="mx-1 text-[#F75B31]">•</span>
                        <span class="font-medium">{frontmatter.author}</span>
                      </>
                    )
                  }
                  {
                    minutesRead && (
                      <>
                        <span class="mx-1 text-[#F75B31]">•</span>
                        <span class="text-[#666666]">{minutesRead}</span>
                      </>
                    )
                  }
                </div>

                {
                  frontmatter.tags && frontmatter.tags.length > 0 && (
                    <div class="mt-4 flex flex-wrap gap-2">
                      {frontmatter.tags.map((tag: string) => (
                        <span class="inline-flex items-center rounded-full bg-[#F8F7E5BF] px-2.5 py-0.5 text-xs font-medium text-[#000000] hover:bg-[#F75B31] hover:text-[#FFFFFF]">
                          {tag}
                        </span>
                      ))}
                    </div>
                  )
                }
              </header>

              <div class="prose prose-lg">
                <slot />
              </div>
            </div>
          </article>
        </div>
      </div>
    </main>
    <script is:inline>
      // Generate TOC from headings
      document.addEventListener("DOMContentLoaded", () => {
        // Get only the article content, excluding the sidebar
        const articleContent = document.querySelector("article.prose");
        if (!articleContent) return;

        // Only get h2 and h3 elements that are direct children of the article content
        const headingElements = articleContent.querySelectorAll(
          ":scope > h2, :scope > h3"
        );
        const headings = Array.from(headingElements).map((heading) => {
          // Ensure the heading has an ID
          if (!heading.id) {
            heading.id = heading.textContent
              .toLowerCase()
              .replace(/[^\w\s-]/g, "")
              .replace(/\s+/g, "-")
              .replace(/-+/g, "-")
              .trim();
          }

          return {
            depth: parseInt(heading.tagName.substring(1)),
            slug: heading.id,
            text: heading.textContent || ""
          };
        });

        // Update the TOC component with the headings
        const toc = document.querySelector(".toc ul");
        if (toc) {
          toc.innerHTML = headings
            .map((heading) => {
              const indentClass =
                heading.depth === 3 ? "ml-4 text-sm" : "text-base";
              return `
              <li class="${indentClass}">
                <a href="#${heading.slug}" class="block py-1 text-black transition-colors hover:text-[#F75B31]" data-depth="${heading.depth}">
                  ${heading.text}
                </a>
              </li>
            `;
            })
            .join("");
        }

        // Highlight active TOC item on scroll
        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              const id = entry.target.getAttribute("id");
              if (entry.intersectionRatio > 0) {
                document.querySelectorAll(".toc a").forEach((a) => {
                  a.classList.remove("active");
                  if (a.getAttribute("href") === `#${id}`) {
                    a.classList.add("active");
                  }
                });
              }
            });
          },
          { rootMargin: "-20% 0px -60% 0px" }
        );

        // Observe all headings
        document.querySelectorAll("h2[id], h3[id]").forEach((section) => {
          observer.observe(section);
        });
      });
    </script>
    <script is:inline>
      // Add visible class to prevent FOUC
      document.addEventListener("DOMContentLoaded", () => {
        document.body.classList.add("visible");
      });
    </script>
  </body>
</html>
